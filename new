
 loader_start:

 ;_________________________________________________
 ;int 15h eax=0000E820h,edx=534D4150h ('SMAP')获取内存布局v
    xor ebx,ebx  ;第一次调用时，ebx值要为0
    mov edx,0x534d4150  ;edx只赋值一次，循环体中不会改变
    mov edi,ards_buf  ;ards结构体缓冲区
.e820_mem_get_loop:
    mov eax,0x0000e820  ;执行int 0x15后，eax的值变为0x534d4150,所以每次执行int前都要更新为子功能号
    mov ecx,20
    int 0x15
    jc .e820_failed_so_try_e801
;若cf位为1则有错误发生，尝试0xe801子功能
    add edi,ecx  ;使di增加20字节指向缓冲区中新的ARDS结构位置
    inc word [ards_nr] ;记录 ARDS 数量
    cmp ebx,0   ;若ebx为0，且cf不为1,这说明ards全部返回
    jnz .e820_mem_get_loop
    ;在所有ards结构中
    ;找出（base_add_low + length_low)的最大值，即内存的容量
    mov cx,[ards_nr]
    ;遍历每一个ARDS机构体，循环次数是ARDS的数量
    mov ebx,ards_buf
    xor edx,edx
    .find_max_mem_area:
    ;无需判断type是否为1,最大的内存块一定是可被使用的
    mov eax,[ebx]
    add eax,[ebx+8]
    add ebx,20
    cmp edx,eax
    ;冒泡排序，找出最大，edx寄存器始终是最大的内存容量
    jge .next_ards
    mov edx,eax
.next_ards:
    loop .find_max_mem_area
    jmp .mem_get_ok

    ;_____int 15h ax =E801h 获取内存大小，最大支持4G——————
    ;返回后，ax cx值一样，以KB为单位，bx dx值一样，以64KB为单位
    ;在ax和cx寄存器中为低16MB，在bx和dx寄存器中为16MB到4GB
.e820_failed_so_try_e801:
    mov ax,0xe801
    int 0x15
    jc .e801_failed_so_try88
    ;1先算出低15MB的内存
    ;ax和cx中是以KB为单位的内存数量，将其转换为以byte为单位
    mov cx,0x400
    mul cx
    shl edx,16
    and eax,0x0000FFFF
    or edx,eax
    add edx,0x100000
    mov esi,edx

    ;2再将16MB以上的内存转换为byte为单位
    ;寄存器bx和dx中是以64KB为单位的内存数量
    xor eax,eax
    mov ax,bx
    mov ecx,0x10000
    mul ecx

    add esi,eax
    ;由于此方法只能测出4GB以内的内存，故32位eax足够了
    ;edx肯定为0,只加eax便可
    mov edx,esi
    jmp .mem_get_ok

    ;____ int 15h ah =0x88获取内存大小，只能获取64MB之内————————
.e801_failed_so_try88:
    ;int 15后，ax存入的是以KB为单位的内存容量
    mov ah,0x88
    int 0x15
    jc error_hlt
    and eax,0x0000FFFF
    ;16位乘法，被乘数是ax，积为32位。积的高16位在dx中
    ;积的低 16 位在 ax
    mov cx,0x400
    ;Ox400 等于 1024 ，将 ax 中的内存容量换为以 byte 为单位
    mul cx
    shl edx,16 ;把 dx 移到高 16
    or edx, eax ;把积的低 16 位组合到 edx ，为 32 位的积
    add edx,0x100000 ; Ox88 子功能只会返回 lMB 以上的内存
    ;故实际内存大小要加上 lMB

 .mem_get_ok :
    mov [total_mem_bytes], edx

    jmp $
;将内存换为 byte单位后存入total_mem_bytes处